// schema.prisma
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String    @id @default(uuid())
    name      String
    email     String    @unique
    password  String
    role      Role      @default(CUSTOMER)
    orders    Order[]
    cart      Cart?
    reviews   Review[]
    sessions  Session[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Session {
    id           String   @id @default(uuid())
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    refreshToken String   @unique
    expiresAt    DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

enum Role {
    CUSTOMER
    ADMIN
}

model Category {
    id        String    @id @default(uuid())
    name      String    @unique
    products  Product[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Product {
    id          String      @id @default(uuid())
    name        String
    description String
    price       Float
    stock       Int
    imageUrl    String?
    categoryId  String
    category    Category    @relation(fields: [categoryId], references: [id])
    reviews     Review[]
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    CartItem    CartItem[]
    OrderItem   OrderItem[]
}

model Cart {
    id        String     @id @default(uuid())
    userId    String     @unique
    user      User       @relation(fields: [userId], references: [id])
    items     CartItem[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model CartItem {
    id        String   @id @default(uuid())
    cartId    String
    cart      Cart     @relation(fields: [cartId], references: [id])
    productId String
    product   Product  @relation(fields: [productId], references: [id])
    quantity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id         String      @id @default(uuid())
    userId     String
    user       User        @relation(fields: [userId], references: [id])
    items      OrderItem[]
    totalPrice Float
    status     OrderStatus @default(PENDING)
    payment    Payment?
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
}

enum OrderStatus {
    PENDING
    PAID
    SHIPPED
    DELIVERED
    CANCELLED
}

model OrderItem {
    id        String   @id @default(uuid())
    orderId   String
    order     Order    @relation(fields: [orderId], references: [id])
    productId String
    product   Product  @relation(fields: [productId], references: [id])
    quantity  Int
    price     Float
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Payment {
    id                    String        @id @default(uuid())
    orderId               String        @unique
    order                 Order         @relation(fields: [orderId], references: [id])
    amount                Float
    method                PaymentMethod @default(CARD)
    status                PaymentStatus @default(PENDING)
    createdAt             DateTime      @default(now())
    updatedAt             DateTime      @updatedAt
    stripePaymentIntentId String? // Store Stripe Payment Intent ID
    stripePaymentMethodId String? // Store Stripe Payment Method ID
}

enum PaymentMethod {
    CARD // Credit card via Stripe
}

enum PaymentStatus {
    PENDING
    SUCCESS
    FAILED
}

model Review {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    productId String
    product   Product  @relation(fields: [productId], references: [id])
    rating    Int      @default(5)
    comment   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
