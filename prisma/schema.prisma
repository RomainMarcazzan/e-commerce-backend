generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String   @id @default(uuid())
    email        String   @unique
    passwordHash String
    name         String?
    role         Role     @default(USER)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // Relations
    sessions Session[]
    orders   Order[]
    cart     Cart?
}

model Session {
    id           String   @id @default(uuid())
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    refreshToken String   @unique
    expiresAt    DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model Product {
    id          String   @id @default(uuid())
    name        String
    description String?
    price       Float
    stock       Int      @default(0)
    imageUrl    String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    cartItems  CartItem[]
    orderItems OrderItem[]
}

model Cart {
    id        String     @id @default(uuid())
    userId    String     @unique
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    items     CartItem[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model CartItem {
    id        String  @id @default(uuid())
    cartId    String
    cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
    productId String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    quantity  Int     @default(1)
}

model Order {
    id          String      @id @default(uuid())
    userId      String
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    totalAmount Float
    status      OrderStatus @default(PENDING)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    items       OrderItem[]
}

model OrderItem {
    id        String  @id @default(uuid())
    orderId   String
    order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    productId String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    quantity  Int
    price     Float
}

enum Role {
    USER
    ADMIN
}

enum OrderStatus {
    PENDING
    PAID
    SHIPPED
    DELIVERED
    CANCELLED
}
